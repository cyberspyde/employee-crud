const fs = require('fs');\nconst path = 'src/components/DepartmentsView.tsx';\nconst lines = [];
lines.push(\"import { useState, useEffect, useMemo, useCallback } from \\\"react\\\";\");
lines.push(\"import {\");
lines.push(\"  GitBranch,\");
lines.push(\"  Plus,\");
lines.push(\"  RefreshCw,\");
lines.push(\"  Users,\");
lines.push(\"  Trash2,\");
lines.push(\"  Edit2,\");
lines.push(\"  UserPlus\");
lines.push(\"} from \\\"lucide-react\\\";\");
lines.push(\"import type { Department, DepartmentNode, DepartmentInput, DepartmentUpdateInput } from \\\"../types/department\\\";\");
lines.push(\"import type { Employee } from \\\"../types/employee\\\";\");
lines.push(\"import { useDepartments } from \\\"../hooks/useDepartments\\\";\");
lines.push(\"\");
lines.push(\"interface DepartmentsViewProps {\");
lines.push(\"  employees: Employee[];\");
lines.push(\"  employeesLoading: boolean;\");
lines.push(\"  refreshEmployees: () => Promise<void>;\");
lines.push(\"}\");
lines.push(\"\");
lines.push(\"interface DepartmentFormState {\");
lines.push(\"  name: string;\");
lines.push(\"  description?: string;\");
lines.push(\"  parent_id: string | null;\");
lines.push(\"}\");
lines.push(\"\");
lines.push(\"interface AssignState {\");
lines.push(\"  open: boolean;\");
lines.push(\"  selected: Set<string>;\");
lines.push(\"  search: string;\");
lines.push(\"}\");
lines.push(\"\");
lines.push(\"function findNode(nodes: DepartmentNode[], id: string): DepartmentNode | null {\");
lines.push(\"  for (const node of nodes) {\");
lines.push(\"    if (node.id === id) {\");
lines.push(\"      return node;\");
lines.push(\"    }\");
lines.push(\"    const child = findNode(node.children, id);\");
lines.push(\"    if (child) {\");
lines.push(\"      return child;\");
lines.push(\"    }\");
lines.push(\"  }\");
lines.push(\"  return null;\");
lines.push(\"}\");
lines.push(\"\");
lines.push(\"function collectDescendants(node: DepartmentNode): Set<string> {\");
lines.push(\"  const ids = new Set<string>();\");
lines.push(\"  const stack = [node];\");
lines.push(\"  while (stack.length) {\");
lines.push(\"    const current = stack.pop();\");
lines.push(\"    if (!current) continue;\");
lines.push(\"    ids.add(current.id);\");
lines.push(\"    for (const child of current.children) {\");
lines.push(\"      stack.push(child);\");
lines.push(\"    }\");
lines.push(\"  }\");
lines.push(\"  return ids;\");
lines.push(\"}\");
lines.push(\"\");
lines.push(\"function sortDepartments(list: Department[]): Department[] {\");
lines.push(\"  return [...list].sort((a, b) => a.name.localeCompare(b.name));\");
lines.push(\"}\");
